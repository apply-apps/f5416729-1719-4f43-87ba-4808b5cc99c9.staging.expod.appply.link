```js
// App.js
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, Alert } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

const App = () => {
  const [beerCount, setBeerCount] = useState(0);
  const [startTime, setStartTime] = useState(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const storedBeerCount = await AsyncStorage.getItem('beerCount');
      const storedStartTime = await AsyncStorage.getItem('startTime');
      if (storedBeerCount !== null) {
        setBeerCount(parseInt(storedBeerCount));
      }
      if (storedStartTime !== null) {
        setStartTime(new Date(storedStartTime));
      } else {
        const newStartTime = new Date();
        setStartTime(newStartTime);
        await AsyncStorage.setItem('startTime', newStartTime.toISOString());
      }
    } catch (error) {
      console.error('Error loading data:', error);
    }
  };

  const saveData = async (count) => {
    try {
      await AsyncStorage.setItem('beerCount', count.toString());
    } catch (error) {
      console.error('Error saving data:', error);
    }
  };

  const addBeer = () => {
    const newCount = beerCount + 1;
    setBeerCount(newCount);
    saveData(newCount);
  };

  const resetCount = async () => {
    Alert.alert(
      "Reset Confirmation",
      "Are you sure you want to reset your beer count?",
      [
        {
          text: "Cancel",
          style: "cancel"
        },
        { 
          text: "OK", 
          onPress: async () => {
            setBeerCount(0);
            const newStartTime = new Date();
            setStartTime(newStartTime);
            await AsyncStorage.setItem('beerCount', '0');
            await AsyncStorage.setItem('startTime', newStartTime.toISOString());
          }
        }
      ]
    );
  };

  const getElapsedTime = () => {
    if (!startTime) return '';
    const now = new Date();
    const elapsed = now - startTime;
    const hours = Math.floor(elapsed / (1000 * 60 * 60));
    const minutes = Math.floor((elapsed % (1000 * 60 * 60)) / (1000 * 60));
    return `${hours}h ${minutes}m`;
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Beer Tracker</Text>
      <Text style={styles.count}>{beerCount}</Text>
      <Text style={styles.label}>Beers consumed</Text>
      <Text style={styles.time}>Time elapsed: {getElapsedTime()}</Text>
      <TouchableOpacity style={styles.button} onPress={addBeer}>
        <Text style={styles.buttonText}>Add Beer</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.resetButton} onPress={resetCount}>
        <Text style={styles.buttonText}>Reset</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#1c1c1c',
    padding: 20,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 20,
  },
  count: {
    fontSize: 72,
    fontWeight: 'bold',
    color: '#ffd700',
  },
  label: {
    fontSize: 18,
    color: '#fff',
    marginBottom: 20,
  },
  time: {
    fontSize: 16,
    color: '#bbb',
    marginBottom: 30,
  },
  button: {
    backgroundColor: '#ffd700',
    paddingHorizontal: 30,
    paddingVertical: 15,
    borderRadius: 25,
    marginBottom: 20,
  },
  resetButton: {
    backgroundColor: '#ff4500',
    paddingHorizontal: 30,
    paddingVertical: 15,
    borderRadius: 25,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1c1c1c',
  },
});

export default App;
// End of App.js
```